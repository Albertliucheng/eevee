// Code generated by eevee. DO NOT EDIT!

package repository

import (
	"/dao"
	"/entity"
	"/model"
	"context"
	"database/sql"

	"golang.org/x/xerrors"
)

type Field interface {
	ToModel(*entity.Field) *model.Field
	ToModels(entity.Fields) *model.Fields
	Create(context.Context, *entity.Field) (*model.Field, error)
	Creates(context.Context, entity.Fields) (*model.Fields, error)
}

type FieldImpl struct {
	fieldDAO dao.Field
	repo     Repository
}

func NewField(ctx context.Context, tx *sql.Tx) *FieldImpl {
	return &FieldImpl{fieldDAO: dao.NewField(ctx, tx)}
}

func (r *FieldImpl) ToModel(value *entity.Field) *model.Field {
	return r.createCollection(entity.Fields{value}).First()
}

func (r *FieldImpl) ToModels(values entity.Fields) *model.Fields {
	return r.createCollection(values)
}

func (r *FieldImpl) Create(ctx context.Context, value *entity.Field) (*model.Field, error) {
	if err := r.fieldDAO.Create(ctx, value); err != nil {
		return nil, xerrors.Errorf("cannot Create: %w", err)
	}
	v := r.ToModel(value)
	v.SetSavedValue(value)
	v.SetAlreadyCreated(true)
	return v, nil
}

func (r *FieldImpl) Creates(ctx context.Context, entities entity.Fields) (*model.Fields, error) {
	for _, v := range entities {
		if _, err := r.Create(ctx, v); err != nil {
			return nil, xerrors.Errorf("cannot Create: %w", err)
		}
	}
	values := r.ToModels(entities)
	values.Each(func(v *model.Field) {
		v.SetSavedValue(v.Field)
		v.SetAlreadyCreated(true)
	})
	return values, nil
}

func (r *FieldImpl) createCollection(entities entity.Fields) *model.Fields {
	values := model.NewFields(entities)
	for i := 0; i < len(entities); i += 1 {
		values.Add(r.create(entities[i], values))
	}
	return values
}

func (r *FieldImpl) create(entity *entity.Field, values *model.Fields) *model.Field {
	value := model.NewField(entity, r.fieldDAO)
	value.SetConverter(r.repo.(model.ModelConverter))
	return value
}
