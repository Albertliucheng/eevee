// Code generated by eevee. DO NOT EDIT!

package repository

import (
	"context"
	"daoplugin/entity"
	"daoplugin/model"
	"log"
	"reflect"

	"golang.org/x/xerrors"
)

type FieldMock struct {
	expect *FieldExpect
}

func (r *FieldMock) EXPECT() *FieldExpect {
	return r.expect
}

func NewFieldMock() *FieldMock {
	return &FieldMock{expect: NewFieldExpect()}
}

type FieldToModelExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(value *entity.Field)
	value         *entity.Field
	r0            *model.Field
}

func (r *FieldToModelExpect) Return(r0 *model.Field) *FieldToModelExpect {
	r.r0 = r0
	return r
}

func (r *FieldToModelExpect) Do(action func(value *entity.Field)) *FieldToModelExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldToModelExpect) OutOfOrder() *FieldToModelExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldToModelExpect) AnyTimes() *FieldToModelExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldToModelExpect) Times(n int) *FieldToModelExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) ToModel(value *entity.Field) (r0 *model.Field) {
	if len(r.expect.toModel) == 0 {
		log.Printf("cannot find mock method for Field.ToModel")
		return
	}
	for _, exp := range r.expect.toModel {
		if !reflect.DeepEqual(exp.value, value) {
			continue
		}
		for _, action := range exp.actions {
			action(value)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			log.Printf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		return
	}
	log.Printf("invalid argument Field value:[%+v]", value)
	return
}

func (r *FieldExpect) ToModel(value *entity.Field) *FieldToModelExpect {
	exp := &FieldToModelExpect{
		actions: []func(value *entity.Field){},
		expect:  r,
		value:   value,
	}
	r.toModel = append(r.toModel, exp)
	return exp
}

type FieldToModelsExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(values entity.Fields)
	values        entity.Fields
	r0            *model.Fields
}

func (r *FieldToModelsExpect) Return(r0 *model.Fields) *FieldToModelsExpect {
	r.r0 = r0
	return r
}

func (r *FieldToModelsExpect) Do(action func(values entity.Fields)) *FieldToModelsExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldToModelsExpect) OutOfOrder() *FieldToModelsExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldToModelsExpect) AnyTimes() *FieldToModelsExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldToModelsExpect) Times(n int) *FieldToModelsExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) ToModels(values entity.Fields) (r0 *model.Fields) {
	if len(r.expect.toModels) == 0 {
		log.Printf("cannot find mock method for Field.ToModels")
		return
	}
	for _, exp := range r.expect.toModels {
		if !reflect.DeepEqual(exp.values, values) {
			continue
		}
		for _, action := range exp.actions {
			action(values)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			log.Printf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		return
	}
	log.Printf("invalid argument Field values:[%+v]", values)
	return
}

func (r *FieldExpect) ToModels(values entity.Fields) *FieldToModelsExpect {
	exp := &FieldToModelsExpect{
		actions: []func(values entity.Fields){},
		expect:  r,
		values:  values,
	}
	r.toModels = append(r.toModels, exp)
	return exp
}

type FieldCreateExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(ctx context.Context, value *entity.Field)
	ctx           context.Context
	value         *entity.Field
	r0            *model.Field
	r1            error
}

func (r *FieldCreateExpect) Return(r0 *model.Field, r1 error) *FieldCreateExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldCreateExpect) Do(action func(ctx context.Context, value *entity.Field)) *FieldCreateExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldCreateExpect) OutOfOrder() *FieldCreateExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldCreateExpect) AnyTimes() *FieldCreateExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldCreateExpect) Times(n int) *FieldCreateExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) Create(ctx context.Context, value *entity.Field) (r0 *model.Field, r1 error) {
	if len(r.expect.create) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.Create")
		return
	}
	for _, exp := range r.expect.create {
		if !reflect.DeepEqual(exp.ctx, ctx) {
			continue
		}
		if !reflect.DeepEqual(exp.value, value) {
			continue
		}
		for _, action := range exp.actions {
			action(ctx, value)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field ctx:[%+v] value:[%+v]", ctx, value)
	return
}

func (r *FieldExpect) Create(ctx context.Context, value *entity.Field) *FieldCreateExpect {
	exp := &FieldCreateExpect{
		actions: []func(ctx context.Context, value *entity.Field){},
		ctx:     ctx,
		expect:  r,
		value:   value,
	}
	r.create = append(r.create, exp)
	return exp
}

type FieldCreatesExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(ctx context.Context, entities entity.Fields)
	ctx           context.Context
	entities      entity.Fields
	r0            *model.Fields
	r1            error
}

func (r *FieldCreatesExpect) Return(r0 *model.Fields, r1 error) *FieldCreatesExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldCreatesExpect) Do(action func(ctx context.Context, entities entity.Fields)) *FieldCreatesExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldCreatesExpect) OutOfOrder() *FieldCreatesExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldCreatesExpect) AnyTimes() *FieldCreatesExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldCreatesExpect) Times(n int) *FieldCreatesExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) Creates(ctx context.Context, entities entity.Fields) (r0 *model.Fields, r1 error) {
	if len(r.expect.creates) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.Creates")
		return
	}
	for _, exp := range r.expect.creates {
		if !reflect.DeepEqual(exp.ctx, ctx) {
			continue
		}
		if !reflect.DeepEqual(exp.entities, entities) {
			continue
		}
		for _, action := range exp.actions {
			action(ctx, entities)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field ctx:[%+v] entities:[%+v]", ctx, entities)
	return
}

func (r *FieldExpect) Creates(ctx context.Context, entities entity.Fields) *FieldCreatesExpect {
	exp := &FieldCreatesExpect{
		actions:  []func(ctx context.Context, entities entity.Fields){},
		ctx:      ctx,
		entities: entities,
		expect:   r,
	}
	r.creates = append(r.creates, exp)
	return exp
}

type FieldFindAllExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context)
	a0            context.Context
	r0            *model.Fields
	r1            error
}

func (r *FieldFindAllExpect) Return(r0 *model.Fields, r1 error) *FieldFindAllExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindAllExpect) Do(action func(a0 context.Context)) *FieldFindAllExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindAllExpect) OutOfOrder() *FieldFindAllExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindAllExpect) AnyTimes() *FieldFindAllExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindAllExpect) Times(n int) *FieldFindAllExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindAll(a0 context.Context) (r0 *model.Fields, r1 error) {
	if len(r.expect.findAll) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindAll")
		return
	}
	for _, exp := range r.expect.findAll {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		for _, action := range exp.actions {
			action(a0)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v]", a0)
	return
}

func (r *FieldExpect) FindAll(a0 context.Context) *FieldFindAllExpect {
	exp := &FieldFindAllExpect{
		a0:      a0,
		actions: []func(a0 context.Context){},
		expect:  r,
	}
	r.findAll = append(r.findAll, exp)
	return exp
}

type FieldFindByDifficultiesExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 []int)
	a0            context.Context
	a1            []int
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByDifficultiesExpect) Return(r0 *model.Fields, r1 error) *FieldFindByDifficultiesExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByDifficultiesExpect) Do(action func(a0 context.Context, a1 []int)) *FieldFindByDifficultiesExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByDifficultiesExpect) OutOfOrder() *FieldFindByDifficultiesExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByDifficultiesExpect) AnyTimes() *FieldFindByDifficultiesExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByDifficultiesExpect) Times(n int) *FieldFindByDifficultiesExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByDifficulties(a0 context.Context, a1 []int) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByDifficulties) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByDifficulties")
		return
	}
	for _, exp := range r.expect.findByDifficulties {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if len(exp.a1) != len(a1) {
			continue
		}
		if exp.isOutOfOrder {
			isMatched := func() bool {
				for _, exp := range exp.a1 {
					found := false
					for idx, act := range a1 {
						if exp != act {
							continue
						}
						a1 = append(a1[:idx], a1[idx+1:]...)
						found = true
						break
					}
					if !found {
						return false
					}
				}
				return true
			}()
			if !isMatched {
				continue
			}
		} else {
			if !reflect.DeepEqual(exp.a1, a1) {
				continue
			}
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByDifficulties(a0 context.Context, a1 []int) *FieldFindByDifficultiesExpect {
	exp := &FieldFindByDifficultiesExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 []int){},
		expect:  r,
	}
	r.findByDifficulties = append(r.findByDifficulties, exp)
	return exp
}

type FieldFindByDifficultyExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 int)
	a0            context.Context
	a1            int
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByDifficultyExpect) Return(r0 *model.Fields, r1 error) *FieldFindByDifficultyExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByDifficultyExpect) Do(action func(a0 context.Context, a1 int)) *FieldFindByDifficultyExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByDifficultyExpect) OutOfOrder() *FieldFindByDifficultyExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByDifficultyExpect) AnyTimes() *FieldFindByDifficultyExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByDifficultyExpect) Times(n int) *FieldFindByDifficultyExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByDifficulty(a0 context.Context, a1 int) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByDifficulty) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByDifficulty")
		return
	}
	for _, exp := range r.expect.findByDifficulty {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if !reflect.DeepEqual(exp.a1, a1) {
			continue
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByDifficulty(a0 context.Context, a1 int) *FieldFindByDifficultyExpect {
	exp := &FieldFindByDifficultyExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 int){},
		expect:  r,
	}
	r.findByDifficulty = append(r.findByDifficulty, exp)
	return exp
}

type FieldFindByDifficultyAndLevelExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 int, a2 int)
	a0            context.Context
	a1            int
	a2            int
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByDifficultyAndLevelExpect) Return(r0 *model.Fields, r1 error) *FieldFindByDifficultyAndLevelExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByDifficultyAndLevelExpect) Do(action func(a0 context.Context, a1 int, a2 int)) *FieldFindByDifficultyAndLevelExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByDifficultyAndLevelExpect) OutOfOrder() *FieldFindByDifficultyAndLevelExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByDifficultyAndLevelExpect) AnyTimes() *FieldFindByDifficultyAndLevelExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByDifficultyAndLevelExpect) Times(n int) *FieldFindByDifficultyAndLevelExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByDifficultyAndLevel(a0 context.Context, a1 int, a2 int) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByDifficultyAndLevel) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByDifficultyAndLevel")
		return
	}
	for _, exp := range r.expect.findByDifficultyAndLevel {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if !reflect.DeepEqual(exp.a1, a1) {
			continue
		}
		if !reflect.DeepEqual(exp.a2, a2) {
			continue
		}
		for _, action := range exp.actions {
			action(a0, a1, a2)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v] a2:[%+v]", a0, a1, a2)
	return
}

func (r *FieldExpect) FindByDifficultyAndLevel(a0 context.Context, a1 int, a2 int) *FieldFindByDifficultyAndLevelExpect {
	exp := &FieldFindByDifficultyAndLevelExpect{
		a0:      a0,
		a1:      a1,
		a2:      a2,
		actions: []func(a0 context.Context, a1 int, a2 int){},
		expect:  r,
	}
	r.findByDifficultyAndLevel = append(r.findByDifficultyAndLevel, exp)
	return exp
}

type FieldFindByIDExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 uint64)
	a0            context.Context
	a1            uint64
	r0            *model.Field
	r1            error
}

func (r *FieldFindByIDExpect) Return(r0 *model.Field, r1 error) *FieldFindByIDExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByIDExpect) Do(action func(a0 context.Context, a1 uint64)) *FieldFindByIDExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByIDExpect) OutOfOrder() *FieldFindByIDExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByIDExpect) AnyTimes() *FieldFindByIDExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByIDExpect) Times(n int) *FieldFindByIDExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByID(a0 context.Context, a1 uint64) (r0 *model.Field, r1 error) {
	if len(r.expect.findByID) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByID")
		return
	}
	for _, exp := range r.expect.findByID {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if !reflect.DeepEqual(exp.a1, a1) {
			continue
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByID(a0 context.Context, a1 uint64) *FieldFindByIDExpect {
	exp := &FieldFindByIDExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 uint64){},
		expect:  r,
	}
	r.findByID = append(r.findByID, exp)
	return exp
}

type FieldFindByIDsExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 []uint64)
	a0            context.Context
	a1            []uint64
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByIDsExpect) Return(r0 *model.Fields, r1 error) *FieldFindByIDsExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByIDsExpect) Do(action func(a0 context.Context, a1 []uint64)) *FieldFindByIDsExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByIDsExpect) OutOfOrder() *FieldFindByIDsExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByIDsExpect) AnyTimes() *FieldFindByIDsExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByIDsExpect) Times(n int) *FieldFindByIDsExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByIDs(a0 context.Context, a1 []uint64) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByIDs) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByIDs")
		return
	}
	for _, exp := range r.expect.findByIDs {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if len(exp.a1) != len(a1) {
			continue
		}
		if exp.isOutOfOrder {
			isMatched := func() bool {
				for _, exp := range exp.a1 {
					found := false
					for idx, act := range a1 {
						if exp != act {
							continue
						}
						a1 = append(a1[:idx], a1[idx+1:]...)
						found = true
						break
					}
					if !found {
						return false
					}
				}
				return true
			}()
			if !isMatched {
				continue
			}
		} else {
			if !reflect.DeepEqual(exp.a1, a1) {
				continue
			}
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByIDs(a0 context.Context, a1 []uint64) *FieldFindByIDsExpect {
	exp := &FieldFindByIDsExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 []uint64){},
		expect:  r,
	}
	r.findByIDs = append(r.findByIDs, exp)
	return exp
}

type FieldFindByLocationXExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 int)
	a0            context.Context
	a1            int
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByLocationXExpect) Return(r0 *model.Fields, r1 error) *FieldFindByLocationXExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByLocationXExpect) Do(action func(a0 context.Context, a1 int)) *FieldFindByLocationXExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByLocationXExpect) OutOfOrder() *FieldFindByLocationXExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByLocationXExpect) AnyTimes() *FieldFindByLocationXExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByLocationXExpect) Times(n int) *FieldFindByLocationXExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByLocationX(a0 context.Context, a1 int) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByLocationX) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByLocationX")
		return
	}
	for _, exp := range r.expect.findByLocationX {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if !reflect.DeepEqual(exp.a1, a1) {
			continue
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByLocationX(a0 context.Context, a1 int) *FieldFindByLocationXExpect {
	exp := &FieldFindByLocationXExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 int){},
		expect:  r,
	}
	r.findByLocationX = append(r.findByLocationX, exp)
	return exp
}

type FieldFindByLocationXAndLocationYExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 int, a2 int)
	a0            context.Context
	a1            int
	a2            int
	r0            *model.Field
	r1            error
}

func (r *FieldFindByLocationXAndLocationYExpect) Return(r0 *model.Field, r1 error) *FieldFindByLocationXAndLocationYExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByLocationXAndLocationYExpect) Do(action func(a0 context.Context, a1 int, a2 int)) *FieldFindByLocationXAndLocationYExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByLocationXAndLocationYExpect) OutOfOrder() *FieldFindByLocationXAndLocationYExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByLocationXAndLocationYExpect) AnyTimes() *FieldFindByLocationXAndLocationYExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByLocationXAndLocationYExpect) Times(n int) *FieldFindByLocationXAndLocationYExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByLocationXAndLocationY(a0 context.Context, a1 int, a2 int) (r0 *model.Field, r1 error) {
	if len(r.expect.findByLocationXAndLocationY) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByLocationXAndLocationY")
		return
	}
	for _, exp := range r.expect.findByLocationXAndLocationY {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if !reflect.DeepEqual(exp.a1, a1) {
			continue
		}
		if !reflect.DeepEqual(exp.a2, a2) {
			continue
		}
		for _, action := range exp.actions {
			action(a0, a1, a2)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v] a2:[%+v]", a0, a1, a2)
	return
}

func (r *FieldExpect) FindByLocationXAndLocationY(a0 context.Context, a1 int, a2 int) *FieldFindByLocationXAndLocationYExpect {
	exp := &FieldFindByLocationXAndLocationYExpect{
		a0:      a0,
		a1:      a1,
		a2:      a2,
		actions: []func(a0 context.Context, a1 int, a2 int){},
		expect:  r,
	}
	r.findByLocationXAndLocationY = append(r.findByLocationXAndLocationY, exp)
	return exp
}

type FieldFindByLocationXesExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 []int)
	a0            context.Context
	a1            []int
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByLocationXesExpect) Return(r0 *model.Fields, r1 error) *FieldFindByLocationXesExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByLocationXesExpect) Do(action func(a0 context.Context, a1 []int)) *FieldFindByLocationXesExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByLocationXesExpect) OutOfOrder() *FieldFindByLocationXesExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByLocationXesExpect) AnyTimes() *FieldFindByLocationXesExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByLocationXesExpect) Times(n int) *FieldFindByLocationXesExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByLocationXes(a0 context.Context, a1 []int) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByLocationXes) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByLocationXes")
		return
	}
	for _, exp := range r.expect.findByLocationXes {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if len(exp.a1) != len(a1) {
			continue
		}
		if exp.isOutOfOrder {
			isMatched := func() bool {
				for _, exp := range exp.a1 {
					found := false
					for idx, act := range a1 {
						if exp != act {
							continue
						}
						a1 = append(a1[:idx], a1[idx+1:]...)
						found = true
						break
					}
					if !found {
						return false
					}
				}
				return true
			}()
			if !isMatched {
				continue
			}
		} else {
			if !reflect.DeepEqual(exp.a1, a1) {
				continue
			}
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByLocationXes(a0 context.Context, a1 []int) *FieldFindByLocationXesExpect {
	exp := &FieldFindByLocationXesExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 []int){},
		expect:  r,
	}
	r.findByLocationXes = append(r.findByLocationXes, exp)
	return exp
}

type FieldFindByNameExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 string)
	a0            context.Context
	a1            string
	r0            *model.Field
	r1            error
}

func (r *FieldFindByNameExpect) Return(r0 *model.Field, r1 error) *FieldFindByNameExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByNameExpect) Do(action func(a0 context.Context, a1 string)) *FieldFindByNameExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByNameExpect) OutOfOrder() *FieldFindByNameExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByNameExpect) AnyTimes() *FieldFindByNameExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByNameExpect) Times(n int) *FieldFindByNameExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByName(a0 context.Context, a1 string) (r0 *model.Field, r1 error) {
	if len(r.expect.findByName) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByName")
		return
	}
	for _, exp := range r.expect.findByName {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if !reflect.DeepEqual(exp.a1, a1) {
			continue
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByName(a0 context.Context, a1 string) *FieldFindByNameExpect {
	exp := &FieldFindByNameExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 string){},
		expect:  r,
	}
	r.findByName = append(r.findByName, exp)
	return exp
}

type FieldFindByNamesExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 []string)
	a0            context.Context
	a1            []string
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByNamesExpect) Return(r0 *model.Fields, r1 error) *FieldFindByNamesExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByNamesExpect) Do(action func(a0 context.Context, a1 []string)) *FieldFindByNamesExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByNamesExpect) OutOfOrder() *FieldFindByNamesExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByNamesExpect) AnyTimes() *FieldFindByNamesExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByNamesExpect) Times(n int) *FieldFindByNamesExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByNames(a0 context.Context, a1 []string) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByNames) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByNames")
		return
	}
	for _, exp := range r.expect.findByNames {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if len(exp.a1) != len(a1) {
			continue
		}
		if exp.isOutOfOrder {
			isMatched := func() bool {
				for _, exp := range exp.a1 {
					found := false
					for idx, act := range a1 {
						if exp != act {
							continue
						}
						a1 = append(a1[:idx], a1[idx+1:]...)
						found = true
						break
					}
					if !found {
						return false
					}
				}
				return true
			}()
			if !isMatched {
				continue
			}
		} else {
			if !reflect.DeepEqual(exp.a1, a1) {
				continue
			}
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByNames(a0 context.Context, a1 []string) *FieldFindByNamesExpect {
	exp := &FieldFindByNamesExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 []string){},
		expect:  r,
	}
	r.findByNames = append(r.findByNames, exp)
	return exp
}

type FieldFindByObjectNumExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 int)
	a0            context.Context
	a1            int
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByObjectNumExpect) Return(r0 *model.Fields, r1 error) *FieldFindByObjectNumExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByObjectNumExpect) Do(action func(a0 context.Context, a1 int)) *FieldFindByObjectNumExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByObjectNumExpect) OutOfOrder() *FieldFindByObjectNumExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByObjectNumExpect) AnyTimes() *FieldFindByObjectNumExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByObjectNumExpect) Times(n int) *FieldFindByObjectNumExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByObjectNum(a0 context.Context, a1 int) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByObjectNum) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByObjectNum")
		return
	}
	for _, exp := range r.expect.findByObjectNum {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if !reflect.DeepEqual(exp.a1, a1) {
			continue
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByObjectNum(a0 context.Context, a1 int) *FieldFindByObjectNumExpect {
	exp := &FieldFindByObjectNumExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 int){},
		expect:  r,
	}
	r.findByObjectNum = append(r.findByObjectNum, exp)
	return exp
}

type FieldFindByObjectNumsExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context, a1 []int)
	a0            context.Context
	a1            []int
	r0            *model.Fields
	r1            error
}

func (r *FieldFindByObjectNumsExpect) Return(r0 *model.Fields, r1 error) *FieldFindByObjectNumsExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldFindByObjectNumsExpect) Do(action func(a0 context.Context, a1 []int)) *FieldFindByObjectNumsExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldFindByObjectNumsExpect) OutOfOrder() *FieldFindByObjectNumsExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldFindByObjectNumsExpect) AnyTimes() *FieldFindByObjectNumsExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldFindByObjectNumsExpect) Times(n int) *FieldFindByObjectNumsExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) FindByObjectNums(a0 context.Context, a1 []int) (r0 *model.Fields, r1 error) {
	if len(r.expect.findByObjectNums) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.FindByObjectNums")
		return
	}
	for _, exp := range r.expect.findByObjectNums {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		if len(exp.a1) != len(a1) {
			continue
		}
		if exp.isOutOfOrder {
			isMatched := func() bool {
				for _, exp := range exp.a1 {
					found := false
					for idx, act := range a1 {
						if exp != act {
							continue
						}
						a1 = append(a1[:idx], a1[idx+1:]...)
						found = true
						break
					}
					if !found {
						return false
					}
				}
				return true
			}()
			if !isMatched {
				continue
			}
		} else {
			if !reflect.DeepEqual(exp.a1, a1) {
				continue
			}
		}
		for _, action := range exp.actions {
			action(a0, a1)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v] a1:[%+v]", a0, a1)
	return
}

func (r *FieldExpect) FindByObjectNums(a0 context.Context, a1 []int) *FieldFindByObjectNumsExpect {
	exp := &FieldFindByObjectNumsExpect{
		a0:      a0,
		a1:      a1,
		actions: []func(a0 context.Context, a1 []int){},
		expect:  r,
	}
	r.findByObjectNums = append(r.findByObjectNums, exp)
	return exp
}

type FieldCountExpect struct {
	expect        *FieldExpect
	isOutOfOrder  bool
	isAnyTimes    bool
	requiredTimes int
	calledTimes   int
	actions       []func(a0 context.Context)
	a0            context.Context
	r0            int64
	r1            error
}

func (r *FieldCountExpect) Return(r0 int64, r1 error) *FieldCountExpect {
	r.r0 = r0
	r.r1 = r1
	return r
}

func (r *FieldCountExpect) Do(action func(a0 context.Context)) *FieldCountExpect {
	r.actions = append(r.actions, action)
	return r
}

func (r *FieldCountExpect) OutOfOrder() *FieldCountExpect {
	r.isOutOfOrder = true
	return r
}

func (r *FieldCountExpect) AnyTimes() *FieldCountExpect {
	r.isAnyTimes = true
	return r
}

func (r *FieldCountExpect) Times(n int) *FieldCountExpect {
	r.requiredTimes = n
	return r
}

func (r *FieldMock) Count(a0 context.Context) (r0 int64, r1 error) {
	if len(r.expect.count) == 0 {
		r1 = xerrors.New("cannot find mock method for Field.Count")
		return
	}
	for _, exp := range r.expect.count {
		if !reflect.DeepEqual(exp.a0, a0) {
			continue
		}
		for _, action := range exp.actions {
			action(a0)
		}
		if exp.isAnyTimes {
			r0 = exp.r0
			r1 = exp.r1
			return
		}
		if exp.requiredTimes > 1 && exp.calledTimes > exp.requiredTimes {
			r1 = xerrors.Errorf("invalid call times. requiredTimes: [%d] calledTimes: [%d]", exp.requiredTimes, exp.calledTimes)
			return
		}
		exp.calledTimes++
		r0 = exp.r0
		r1 = exp.r1
		return
	}
	r1 = xerrors.Errorf("invalid argument Field a0:[%+v]", a0)
	return
}

func (r *FieldExpect) Count(a0 context.Context) *FieldCountExpect {
	exp := &FieldCountExpect{
		a0:      a0,
		actions: []func(a0 context.Context){},
		expect:  r,
	}
	r.count = append(r.count, exp)
	return exp
}

type FieldExpect struct {
	toModel                     []*FieldToModelExpect
	toModels                    []*FieldToModelsExpect
	create                      []*FieldCreateExpect
	creates                     []*FieldCreatesExpect
	findAll                     []*FieldFindAllExpect
	findByDifficulties          []*FieldFindByDifficultiesExpect
	findByDifficulty            []*FieldFindByDifficultyExpect
	findByDifficultyAndLevel    []*FieldFindByDifficultyAndLevelExpect
	findByID                    []*FieldFindByIDExpect
	findByIDs                   []*FieldFindByIDsExpect
	findByLocationX             []*FieldFindByLocationXExpect
	findByLocationXAndLocationY []*FieldFindByLocationXAndLocationYExpect
	findByLocationXes           []*FieldFindByLocationXesExpect
	findByName                  []*FieldFindByNameExpect
	findByNames                 []*FieldFindByNamesExpect
	findByObjectNum             []*FieldFindByObjectNumExpect
	findByObjectNums            []*FieldFindByObjectNumsExpect
	count                       []*FieldCountExpect
}

func NewFieldExpect() *FieldExpect {
	return &FieldExpect{
		count:                       []*FieldCountExpect{},
		create:                      []*FieldCreateExpect{},
		creates:                     []*FieldCreatesExpect{},
		findAll:                     []*FieldFindAllExpect{},
		findByDifficulties:          []*FieldFindByDifficultiesExpect{},
		findByDifficulty:            []*FieldFindByDifficultyExpect{},
		findByDifficultyAndLevel:    []*FieldFindByDifficultyAndLevelExpect{},
		findByID:                    []*FieldFindByIDExpect{},
		findByIDs:                   []*FieldFindByIDsExpect{},
		findByLocationX:             []*FieldFindByLocationXExpect{},
		findByLocationXAndLocationY: []*FieldFindByLocationXAndLocationYExpect{},
		findByLocationXes:           []*FieldFindByLocationXesExpect{},
		findByName:                  []*FieldFindByNameExpect{},
		findByNames:                 []*FieldFindByNamesExpect{},
		findByObjectNum:             []*FieldFindByObjectNumExpect{},
		findByObjectNums:            []*FieldFindByObjectNumsExpect{},
		toModel:                     []*FieldToModelExpect{},
		toModels:                    []*FieldToModelsExpect{},
	}
}
