// Code generated by eevee. DO NOT EDIT!

package repository

import (
	"context"
	"daoplugin/dao"
	"daoplugin/entity"
	"daoplugin/model"
	"database/sql"

	"golang.org/x/xerrors"
)

type World interface {
	ToModel(*entity.World) *model.World
	ToModels(entity.Worlds) *model.Worlds
	FindAll(context.Context) (*model.Worlds, error)
	FindByID(context.Context, uint64) (*model.World, error)
	FindByIDs(context.Context, []uint64) (*model.Worlds, error)
	Count(context.Context) (int64, error)
}

type WorldImpl struct {
	worldDAO dao.World
	repo     Repository
}

func NewWorld(ctx context.Context, tx *sql.Tx) *WorldImpl {
	return &WorldImpl{worldDAO: dao.NewWorld(ctx, tx)}
}

func (r *WorldImpl) ToModel(value *entity.World) *model.World {
	return r.createCollection(entity.Worlds{value}).First()
}

func (r *WorldImpl) ToModels(values entity.Worlds) *model.Worlds {
	return r.createCollection(values)
}

func (r *WorldImpl) FindAll(a0 context.Context) (*model.Worlds, error) {
	values, err := r.worldDAO.FindAll(a0)
	if err != nil {
		return nil, xerrors.Errorf("failed to FindAll: %w", err)
	}
	collection := r.createCollection(values)
	return collection, nil
}

func (r *WorldImpl) FindByID(a0 context.Context, a1 uint64) (*model.World, error) {
	value, err := r.worldDAO.FindByID(a0, a1)
	if err != nil {
		return nil, xerrors.Errorf("failed to FindByID: %w", err)
	}
	if value == nil {
		return nil, nil
	}
	v := r.createCollection(entity.Worlds{value}).First()
	return v, nil
}

func (r *WorldImpl) FindByIDs(a0 context.Context, a1 []uint64) (*model.Worlds, error) {
	values, err := r.worldDAO.FindByIDs(a0, a1)
	if err != nil {
		return nil, xerrors.Errorf("failed to FindByIDs: %w", err)
	}
	collection := r.createCollection(values)
	return collection, nil
}

func (r *WorldImpl) Count(a0 context.Context) (r0 int64, r1 error) {
	r0, r1 = r.worldDAO.Count(a0)
	if r1 != nil {
		r1 = xerrors.Errorf("failed to Count: %w", r1)
	}
	return
}

func (r *WorldImpl) createCollection(entities entity.Worlds) *model.Worlds {
	values := model.NewWorlds(entities)
	for i := 0; i < len(entities); i += 1 {
		values.Add(r.create(entities[i], values))
	}
	return values
}

func (r *WorldImpl) create(entity *entity.World, values *model.Worlds) *model.World {
	value := model.NewWorld(entity, r.worldDAO)
	value.SetConverter(r.repo.(model.ModelConverter))
	return value
}
