// Code generated by eevee. DO NOT EDIT!

package entity

type Field struct {
	ID         uint64 `json:"id"`
	Name       string `json:"name"`
	LocationX  int    `json:"locationX"`
	LocationY  int    `json:"locationY"`
	ObjectNum  int    `json:"objectNum"`
	Level      int    `json:"level"`
	Difficulty int    `json:"difficulty"`
}

type Fields []*Field

func (e Fields) IDs() []uint64 {
	values := make([]uint64, 0, len(e))
	for _, value := range e {
		values = append(values, value.ID)
	}
	return values
}

func (e Fields) Names() []string {
	values := make([]string, 0, len(e))
	for _, value := range e {
		values = append(values, value.Name)
	}
	return values
}

func (e Fields) LocationXes() []int {
	values := make([]int, 0, len(e))
	for _, value := range e {
		values = append(values, value.LocationX)
	}
	return values
}

func (e Fields) LocationIes() []int {
	values := make([]int, 0, len(e))
	for _, value := range e {
		values = append(values, value.LocationY)
	}
	return values
}

func (e Fields) ObjectNums() []int {
	values := make([]int, 0, len(e))
	for _, value := range e {
		values = append(values, value.ObjectNum)
	}
	return values
}

func (e Fields) Levels() []int {
	values := make([]int, 0, len(e))
	for _, value := range e {
		values = append(values, value.Level)
	}
	return values
}

func (e Fields) Difficulties() []int {
	values := make([]int, 0, len(e))
	for _, value := range e {
		values = append(values, value.Difficulty)
	}
	return values
}
