// Code generated by eevee. DO NOT EDIT!

package repository

import (
	"api/entity"
	"api/model"
	"api/repository"
)

type RepositoryMock struct {
	field     func() *FieldMock
	group     func() *GroupMock
	skill     func() *SkillMock
	user      func() *UserMock
	userField func() *UserFieldMock
	world     func() *WorldMock
}

func (r *RepositoryMock) Field() repository.Field {
	return r.field()
}
func (r *RepositoryMock) FieldMock() *FieldMock {
	return r.field()
}

func (r *RepositoryMock) Group() repository.Group {
	return r.group()
}
func (r *RepositoryMock) GroupMock() *GroupMock {
	return r.group()
}

func (r *RepositoryMock) Skill() repository.Skill {
	return r.skill()
}
func (r *RepositoryMock) SkillMock() *SkillMock {
	return r.skill()
}

func (r *RepositoryMock) User() repository.User {
	return r.user()
}
func (r *RepositoryMock) UserMock() *UserMock {
	return r.user()
}

func (r *RepositoryMock) UserField() repository.UserField {
	return r.userField()
}
func (r *RepositoryMock) UserFieldMock() *UserFieldMock {
	return r.userField()
}

func (r *RepositoryMock) World() repository.World {
	return r.world()
}
func (r *RepositoryMock) WorldMock() *WorldMock {
	return r.world()
}

func NewMock() *RepositoryMock {
	var (
		repo      *RepositoryMock
		field     *FieldMock
		group     *GroupMock
		skill     *SkillMock
		user      *UserMock
		userField *UserFieldMock
		world     *WorldMock
	)
	repo = &RepositoryMock{
		field: func() *FieldMock {
			if field != nil {
				return field
			}
			field = NewFieldMock()
			return field
		},
		group: func() *GroupMock {
			if group != nil {
				return group
			}
			group = NewGroupMock()
			return group
		},
		skill: func() *SkillMock {
			if skill != nil {
				return skill
			}
			skill = NewSkillMock()
			return skill
		},
		user: func() *UserMock {
			if user != nil {
				return user
			}
			user = NewUserMock()
			return user
		},
		userField: func() *UserFieldMock {
			if userField != nil {
				return userField
			}
			userField = NewUserFieldMock()
			return userField
		},
		world: func() *WorldMock {
			if world != nil {
				return world
			}
			world = NewWorldMock()
			return world
		},
	}
	return repo
}

func (r *RepositoryMock) ToField(value *entity.Field) *model.Field {
	return r.Field().ToModel(value)
}

func (r *RepositoryMock) ToGroup(value *entity.Group) *model.Group {
	return r.Group().ToModel(value)
}

func (r *RepositoryMock) ToSkill(value *entity.Skill) *model.Skill {
	return r.Skill().ToModel(value)
}

func (r *RepositoryMock) ToUser(value *entity.User) *model.User {
	return r.User().ToModel(value)
}

func (r *RepositoryMock) ToUserField(value *entity.UserField) *model.UserField {
	return r.UserField().ToModel(value)
}

func (r *RepositoryMock) ToWorld(value *entity.World) *model.World {
	return r.World().ToModel(value)
}
