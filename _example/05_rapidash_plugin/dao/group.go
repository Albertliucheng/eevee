package dao

import (
	"context"
	"rapidashplugin/entity"

	"go.knocknote.io/rapidash"
	"golang.org/x/xerrors"
)

type Group interface {
	Count(context.Context) (int64, error)
	Create(context.Context, *entity.Group) error
	Delete(context.Context, *entity.Group) error
	DeleteByID(context.Context, uint64) error
	DeleteByIDs(context.Context, []uint64) error
	FindAll(context.Context) (entity.Groups, error)
	FindByID(context.Context, uint64) (*entity.Group, error)
	FindByIDs(context.Context, []uint64) (entity.Groups, error)
	Update(context.Context, *entity.Group) error
	UpdateByID(context.Context, uint64, map[string]interface{}) error
	UpdateByIDs(context.Context, []uint64, map[string]interface{}) error
}

type GroupImpl struct {
	tx *rapidash.Tx
}

func NewGroup(ctx context.Context, tx *rapidash.Tx) Group {
	return &GroupImpl{tx: tx}
}

// generated by eevee
func (d *GroupImpl) Count(ctx context.Context) (r int64, e error) {
	builder := rapidash.NewQueryBuilder("groups")
	count, err := d.tx.CountByQueryBuilderContext(ctx, builder)
	if err != nil {
		return 0, xerrors.Errorf("failed to Count: %w", err)
	}
	return int64(count), nil
}

// generated by eevee
func (d *GroupImpl) Create(ctx context.Context, value *entity.Group) (e error) {
	id, err := d.tx.CreateByTableContext(ctx, "groups", value)
	if err != nil {
		return xerrors.Errorf("failed to Create: %w", err)
	}
	value.ID = uint64(id)
	return nil
}

// generated by eevee
func (d *GroupImpl) Delete(ctx context.Context, value *entity.Group) (e error) {
	builder := rapidash.NewQueryBuilder("groups").Eq("id", value.ID)
	if err := d.tx.DeleteByQueryBuilderContext(ctx, builder); err != nil {
		return xerrors.Errorf("failed to Delete: %w", err)
	}
	return nil
}

// generated by eevee
func (d *GroupImpl) DeleteByID(ctx context.Context, a0 uint64) (e error) {
	builder := rapidash.NewQueryBuilder("groups").Eq("id", a0)
	if err := d.tx.DeleteByQueryBuilderContext(ctx, builder); err != nil {
		return xerrors.Errorf("failed to Delete: %w", err)
	}
	return nil
}

// generated by eevee
func (d *GroupImpl) DeleteByIDs(ctx context.Context, a0 []uint64) (e error) {
	builder := rapidash.NewQueryBuilder("groups").In("id", a0)
	if err := d.tx.DeleteByQueryBuilderContext(ctx, builder); err != nil {
		return xerrors.Errorf("failed to Delete: %w", err)
	}
	return nil
}

// generated by eevee
func (d *GroupImpl) FindAll(ctx context.Context) (r entity.Groups, e error) {
	values := entity.Groups{}
	if err := d.tx.FindAllByTable("groups", &values); err != nil {
		return values, xerrors.Errorf("failed to FindAll %w", err)
	}
	return values, nil
}

// generated by eevee
func (d *GroupImpl) FindByID(ctx context.Context, a0 uint64) (r *entity.Group, e error) {
	builder := rapidash.NewQueryBuilder("groups").Eq("id", a0)
	var value entity.Group
	if err := d.tx.FindByQueryBuilderContext(ctx, builder, &value); err != nil {
		return nil, xerrors.Errorf("failed to Find: %w", err)
	}
	return &value, nil
}

// generated by eevee
func (d *GroupImpl) FindByIDs(ctx context.Context, a0 []uint64) (r entity.Groups, e error) {
	builder := rapidash.NewQueryBuilder("groups").In("id", a0)
	values := entity.Groups{}
	if err := d.tx.FindByQueryBuilderContext(ctx, builder, &values); err != nil {
		return nil, xerrors.Errorf("failed to Find: %w", err)
	}
	return values, nil
}

// generated by eevee
func (d *GroupImpl) Update(ctx context.Context, value *entity.Group) (e error) {
	updateMap := map[string]interface{}{"name": value.Name}
	builder := rapidash.NewQueryBuilder("groups").Eq("id", value.ID)
	if err := d.tx.UpdateByQueryBuilderContext(ctx, builder, updateMap); err != nil {
		return xerrors.Errorf("failed to Update: %w", err)
	}
	return nil
}

// generated by eevee
func (d *GroupImpl) UpdateByID(ctx context.Context, a0 uint64, updateMap map[string]interface{}) (e error) {
	builder := rapidash.NewQueryBuilder("groups").Eq("id", a0)
	if err := d.tx.UpdateByQueryBuilderContext(ctx, builder, updateMap); err != nil {
		return xerrors.Errorf("failed to Update: %w", err)
	}
	return nil
}

// generated by eevee
func (d *GroupImpl) UpdateByIDs(ctx context.Context, a0 []uint64, updateMap map[string]interface{}) (e error) {
	builder := rapidash.NewQueryBuilder("groups").In("id", a0)
	if err := d.tx.UpdateByQueryBuilderContext(ctx, builder, updateMap); err != nil {
		return xerrors.Errorf("failed to Update: %w", err)
	}
	return nil
}
